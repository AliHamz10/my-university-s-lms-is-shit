// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ENUM types
enum UserStatus {
  active
  inactive
  suspended
  pending
}

enum UserLocale {
  en
  es
  fr
  de
  ar
  ur
}

enum ModalityType {
  in_person
  online
  hybrid
}

enum EnrollmentStatus {
  enrolled
  waitlisted
  dropped
  completed
}

enum TeachingRole {
  primary
  co_instructor
  ta
}

enum ExamType {
  quiz
  midterm
  final
  assignment
  project
  presentation
}

enum ExamStatus {
  draft
  published
  active
  completed
  archived
}

enum ResultStatus {
  pending
  graded
  approved
  disputed
  final
}

enum TranscriptStatus {
  draft
  pending_approval
  approved
  official
  archived
}

// Roles table
model Role {
  id          String    @id @default(uuid())
  key         String    @unique
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  profileRoles ProfileRole[]

  @@map("roles")
}

// Profiles table (maps to auth.users)
model Profile {
  id                  String     @id @default(uuid())
  orgId               String?    @map("org_id")
  email               String     @unique
  firstName           String     @map("first_name")
  lastName            String     @map("last_name")
  username            String?    @unique
  avatarUrl           String?    @map("avatar_url")
  status              UserStatus @default(active)
  locale              UserLocale @default(en)
  emailVerifiedAt     DateTime?  @map("email_verified_at")
  failedLoginAttempts Int        @default(0) @map("failed_login_attempts")
  lockedUntil         DateTime?  @map("locked_until")
  lastLoginAt         DateTime?  @map("last_login_at")
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")
  deletedAt           DateTime?  @map("deleted_at")

  // Relations
  profileRoles         ProfileRole[]
  createdCourses       Course[]
  teachingAssignments  TeachingAssignment[]
  enrollments          Enrollment[]
  createdAssignments   Assignment[]         @relation("AssignmentCreatedBy")
  submissions          Submission[]         @relation("SubmissionByStudent")
  createdExams         Exam[]               @relation("ExamCreatedBy")
  examAttempts         ExamAttempt[]        @relation("ExamAttemptByStudent")
  results              Result[]             @relation("ResultByStudent")
  gradedResults        Result[]             @relation("ResultGradedBy")
  transcripts          Transcript[]         @relation("TranscriptByStudent")
  generatedTranscripts Transcript[]         @relation("TranscriptGeneratedBy")
  approvedTranscripts  Transcript[]         @relation("TranscriptApprovedBy")

  @@map("profiles")
}

// Profile-Role junction table
model ProfileRole {
  id        String    @id @default(uuid())
  profileId String    @map("profile_id")
  roleId    String    @map("role_id")
  orgId     String?   @map("org_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id], onDelete: Restrict)

  // Unique constraint: one role per profile per org
  @@unique([profileId, roleId, orgId], map: "profile_roles_profile_id_role_id_org_id_key")
  @@map("profile_roles")
}

// Departments table
model Department {
  id        String   @id @default(uuid())
  orgId     String   @map("org_id")
  code      String
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  courses Course[]

  // Unique constraint per org
  @@unique([orgId, code])
  @@map("departments")
}

// Terms table
model Term {
  id        String   @id @default(uuid())
  orgId     String   @map("org_id")
  code      String
  name      String
  dateStart DateTime @map("date_start") @db.Date
  dateEnd   DateTime @map("date_end") @db.Date
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  courseOfferings CourseOffering[]
  transcripts     Transcript[]

  // Unique constraint per org
  @@unique([orgId, code])
  @@map("terms")
}

// Courses table
model Course {
  id           String   @id @default(uuid())
  orgId        String   @map("org_id")
  departmentId String?  @map("department_id")
  code         String
  title        String
  description  String?
  creditHours  Int?     @map("credit_hours")
  createdById  String?  @map("created_by")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  department      Department?      @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  createdBy       Profile?         @relation(fields: [createdById], references: [id], onDelete: SetNull)
  courseOfferings CourseOffering[]

  // Unique constraint per org
  @@unique([orgId, code])
  @@map("courses")
}

// Course Offerings table
model CourseOffering {
  id               String       @id @default(uuid())
  orgId            String       @map("org_id")
  courseId         String       @map("course_id")
  termId           String       @map("term_id")
  sectionCode      String       @map("section_code")
  modality         ModalityType @default(in_person)
  capacity         Int          @default(30)
  waitlistCapacity Int          @default(10) @map("waitlist_capacity")
  isPublished      Boolean      @default(false) @map("is_published")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  // Relations
  course              Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  term                Term                 @relation(fields: [termId], references: [id], onDelete: Restrict)
  teachingAssignments TeachingAssignment[]
  enrollments         Enrollment[]
  assignments         Assignment[]
  exams               Exam[]
  results             Result[]
  transcriptItems     TranscriptItem[]

  // Unique constraint per course, term, and section
  @@unique([courseId, termId, sectionCode])
  @@map("course_offerings")
}

// Teaching Assignments table
model TeachingAssignment {
  id                  String       @id @default(uuid())
  courseOfferingId    String       @map("course_offering_id")
  instructorProfileId String       @map("instructor_profile_id")
  role                TeachingRole @default(primary)
  createdAt           DateTime     @default(now()) @map("created_at")

  // Relations
  courseOffering    CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)
  instructorProfile Profile        @relation(fields: [instructorProfileId], references: [id], onDelete: Restrict)

  // Unique constraint per offering and instructor
  @@unique([courseOfferingId, instructorProfileId])
  @@map("teaching_assignments")
}

// Enrollments table
model Enrollment {
  id               String           @id @default(uuid())
  courseOfferingId String           @map("course_offering_id")
  studentProfileId String           @map("student_profile_id")
  status           EnrollmentStatus @default(enrolled)
  gradeScheme      String?          @map("grade_scheme")
  gradeValue       String?          @map("grade_value")
  enrolledAt       DateTime         @default(now()) @map("enrolled_at")
  droppedAt        DateTime?        @map("dropped_at")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  // Relations
  courseOffering CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)
  studentProfile Profile        @relation(fields: [studentProfileId], references: [id], onDelete: Restrict)

  // Unique constraint per offering and student
  @@unique([courseOfferingId, studentProfileId])
  @@map("enrollments")
}

// Assignment and Submission domain

enum SubmissionStatus {
  draft
  submitted
  graded
  returned
}

model Assignment {
  id               String    @id @default(uuid())
  courseOfferingId String    @map("course_offering_id")
  title            String
  description      String?   @db.Text
  dueAt            DateTime? @map("due_at")
  points           Int       @default(100)
  isPublished      Boolean   @default(false) @map("is_published")
  createdById      String?   @map("created_by")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  courseOffering CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)
  createdBy      Profile?       @relation("AssignmentCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  submissions    Submission[]
  results        Result[]

  @@unique([courseOfferingId, title], map: "assignments_offering_title_key")
  @@index([courseOfferingId], map: "assignments_course_offering_id_idx")
  @@index([createdAt], map: "assignments_created_at_idx")
  @@map("assignments")
}

model Submission {
  id               String           @id @default(uuid())
  assignmentId     String           @map("assignment_id")
  studentProfileId String           @map("student_profile_id")
  status           SubmissionStatus @default(draft)
  submittedAt      DateTime?        @map("submitted_at")
  content          String?          @db.Text
  attachmentUrl    String?          @map("attachment_url")
  score            Decimal?         @db.Decimal(6, 2)
  feedback         String?          @db.Text
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  // Relations
  assignment     Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentProfile Profile    @relation("SubmissionByStudent", fields: [studentProfileId], references: [id], onDelete: Restrict)
  results        Result[]

  // A student can submit at most once per assignment (extensions/edits overwrite)
  @@unique([assignmentId, studentProfileId])
  @@index([studentProfileId], map: "submissions_student_profile_id_idx")
  @@index([assignmentId, submittedAt], map: "submissions_assignment_submitted_at_idx")
  @@index([createdAt], map: "submissions_created_at_idx")
  @@map("submissions")
}

// Exam domain

model Exam {
  id               String     @id @default(uuid())
  courseOfferingId String     @map("course_offering_id")
  title            String
  description      String?    @db.Text
  examType         ExamType   @map("exam_type")
  status           ExamStatus @default(draft)
  points           Int        @default(100)
  timeLimitMinutes Int?       @map("time_limit_minutes")
  maxAttempts      Int        @default(1) @map("max_attempts")
  isProctored      Boolean    @default(false) @map("is_proctored")
  instructions     String?    @db.Text
  startAt          DateTime?  @map("start_at")
  endAt            DateTime?  @map("end_at")
  isPublished      Boolean    @default(false) @map("is_published")
  createdById      String?    @map("created_by")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")

  // Relations
  courseOffering CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)
  createdBy      Profile?       @relation("ExamCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  examAttempts   ExamAttempt[]
  results        Result[]

  @@unique([courseOfferingId, title], map: "exams_offering_title_key")
  @@index([courseOfferingId], map: "exams_course_offering_id_idx")
  @@index([examType], map: "exams_exam_type_idx")
  @@index([status], map: "exams_status_idx")
  @@index([createdAt], map: "exams_created_at_idx")
  @@map("exams")
}

model ExamAttempt {
  id               String    @id @default(uuid())
  examId           String    @map("exam_id")
  studentProfileId String    @map("student_profile_id")
  attemptNumber    Int       @map("attempt_number")
  startedAt        DateTime  @map("started_at")
  submittedAt      DateTime? @map("submitted_at")
  timeSpentMinutes Int?      @map("time_spent_minutes")
  score            Decimal?  @db.Decimal(6, 2)
  isCompleted      Boolean   @default(false) @map("is_completed")
  answers          Json? // Store exam answers as JSON
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  exam           Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  studentProfile Profile  @relation("ExamAttemptByStudent", fields: [studentProfileId], references: [id], onDelete: Restrict)
  Result         Result[]

  // A student can have multiple attempts per exam
  @@unique([examId, studentProfileId, attemptNumber])
  @@index([studentProfileId], map: "exam_attempts_student_profile_id_idx")
  @@index([examId, startedAt], map: "exam_attempts_exam_started_at_idx")
  @@index([createdAt], map: "exam_attempts_created_at_idx")
  @@map("exam_attempts")
}

// Result domain

model Result {
  id               String       @id @default(uuid())
  courseOfferingId String       @map("course_offering_id")
  studentProfileId String       @map("student_profile_id")
  examId           String?      @map("exam_id")
  assignmentId     String?      @map("assignment_id")
  examAttemptId    String?      @map("exam_attempt_id")
  submissionId     String?      @map("submission_id")
  resultType       ExamType     @map("result_type")
  title            String
  pointsEarned     Decimal      @map("points_earned") @db.Decimal(6, 2)
  pointsPossible   Decimal      @map("points_possible") @db.Decimal(6, 2)
  percentage       Decimal      @db.Decimal(5, 2)
  letterGrade      String?      @map("letter_grade")
  status           ResultStatus @default(pending)
  gradedAt         DateTime?    @map("graded_at")
  gradedById       String?      @map("graded_by")
  feedback         String?      @db.Text
  isCurved         Boolean      @default(false) @map("is_curved")
  curveValue       Decimal?     @map("curve_value") @db.Decimal(5, 2)
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  // Relations
  courseOffering CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)
  studentProfile Profile        @relation("ResultByStudent", fields: [studentProfileId], references: [id], onDelete: Restrict)
  exam           Exam?          @relation(fields: [examId], references: [id], onDelete: SetNull)
  assignment     Assignment?    @relation(fields: [assignmentId], references: [id], onDelete: SetNull)
  examAttempt    ExamAttempt?   @relation(fields: [examAttemptId], references: [id], onDelete: SetNull)
  submission     Submission?    @relation(fields: [submissionId], references: [id], onDelete: SetNull)
  gradedBy       Profile?       @relation("ResultGradedBy", fields: [gradedById], references: [id], onDelete: SetNull)

  // Unique constraints per student per assessment type
  @@unique([courseOfferingId, studentProfileId, examId], map: "results_course_student_exam_key")
  @@unique([courseOfferingId, studentProfileId, assignmentId], map: "results_course_student_assignment_key")
  @@index([studentProfileId], map: "results_student_profile_id_idx")
  @@index([courseOfferingId], map: "results_course_offering_id_idx")
  @@index([resultType], map: "results_result_type_idx")
  @@index([status], map: "results_status_idx")
  @@index([createdAt], map: "results_created_at_idx")
  @@map("results")
}

// Transcript domain

model Transcript {
  id               String           @id @default(uuid())
  studentProfileId String           @map("student_profile_id")
  termId           String?          @map("term_id")
  status           TranscriptStatus @default(draft)
  gpa              Decimal?         @db.Decimal(3, 2)
  totalCredits     Int              @default(0) @map("total_credits")
  earnedCredits    Int              @default(0) @map("earned_credits")
  isOfficial       Boolean          @default(false) @map("is_official")
  generatedAt      DateTime?        @map("generated_at")
  generatedById    String?          @map("generated_by")
  approvedAt       DateTime?        @map("approved_at")
  approvedById     String?          @map("approved_by")
  notes            String?          @db.Text
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  // Relations
  studentProfile  Profile          @relation("TranscriptByStudent", fields: [studentProfileId], references: [id], onDelete: Restrict)
  term            Term?            @relation(fields: [termId], references: [id], onDelete: SetNull)
  generatedBy     Profile?         @relation("TranscriptGeneratedBy", fields: [generatedById], references: [id], onDelete: SetNull)
  approvedBy      Profile?         @relation("TranscriptApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  transcriptItems TranscriptItem[]

  @@index([studentProfileId], map: "transcripts_student_profile_id_idx")
  @@index([termId], map: "transcripts_term_id_idx")
  @@index([status], map: "transcripts_status_idx")
  @@index([isOfficial], map: "transcripts_is_official_idx")
  @@index([createdAt], map: "transcripts_created_at_idx")
  @@map("transcripts")
}

model TranscriptItem {
  id               String   @id @default(uuid())
  transcriptId     String   @map("transcript_id")
  courseOfferingId String   @map("course_offering_id")
  courseCode       String   @map("course_code")
  courseTitle      String   @map("course_title")
  creditHours      Int      @map("credit_hours")
  letterGrade      String?  @map("letter_grade")
  pointsEarned     Decimal? @map("points_earned") @db.Decimal(6, 2)
  pointsPossible   Decimal? @map("points_possible") @db.Decimal(6, 2)
  percentage       Decimal? @db.Decimal(5, 2)
  termCode         String   @map("term_code")
  termName         String   @map("term_name")
  year             Int
  semester         String
  isCompleted      Boolean  @default(false) @map("is_completed")
  isPassed         Boolean  @default(false) @map("is_passed")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  transcript     Transcript     @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  courseOffering CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Restrict)

  @@index([transcriptId], map: "transcript_items_transcript_id_idx")
  @@index([courseOfferingId], map: "transcript_items_course_offering_id_idx")
  @@index([year, semester], map: "transcript_items_year_semester_idx")
  @@map("transcript_items")
}
