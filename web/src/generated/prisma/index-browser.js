
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  key: 'key',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username',
  avatarUrl: 'avatarUrl',
  status: 'status',
  locale: 'locale',
  emailVerifiedAt: 'emailVerifiedAt',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProfileRoleScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  roleId: 'roleId',
  orgId: 'orgId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  code: 'code',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TermScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  code: 'code',
  name: 'name',
  dateStart: 'dateStart',
  dateEnd: 'dateEnd',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  departmentId: 'departmentId',
  code: 'code',
  title: 'title',
  description: 'description',
  creditHours: 'creditHours',
  createdById: 'createdById',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseOfferingScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  courseId: 'courseId',
  termId: 'termId',
  sectionCode: 'sectionCode',
  modality: 'modality',
  capacity: 'capacity',
  waitlistCapacity: 'waitlistCapacity',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeachingAssignmentScalarFieldEnum = {
  id: 'id',
  courseOfferingId: 'courseOfferingId',
  instructorProfileId: 'instructorProfileId',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  courseOfferingId: 'courseOfferingId',
  studentProfileId: 'studentProfileId',
  status: 'status',
  gradeScheme: 'gradeScheme',
  gradeValue: 'gradeValue',
  enrolledAt: 'enrolledAt',
  droppedAt: 'droppedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  courseOfferingId: 'courseOfferingId',
  title: 'title',
  description: 'description',
  dueAt: 'dueAt',
  points: 'points',
  isPublished: 'isPublished',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  assignmentId: 'assignmentId',
  studentProfileId: 'studentProfileId',
  status: 'status',
  submittedAt: 'submittedAt',
  content: 'content',
  attachmentUrl: 'attachmentUrl',
  score: 'score',
  feedback: 'feedback',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamScalarFieldEnum = {
  id: 'id',
  courseOfferingId: 'courseOfferingId',
  title: 'title',
  description: 'description',
  examType: 'examType',
  status: 'status',
  points: 'points',
  timeLimitMinutes: 'timeLimitMinutes',
  maxAttempts: 'maxAttempts',
  isProctored: 'isProctored',
  instructions: 'instructions',
  startAt: 'startAt',
  endAt: 'endAt',
  isPublished: 'isPublished',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamAttemptScalarFieldEnum = {
  id: 'id',
  examId: 'examId',
  studentProfileId: 'studentProfileId',
  attemptNumber: 'attemptNumber',
  startedAt: 'startedAt',
  submittedAt: 'submittedAt',
  timeSpentMinutes: 'timeSpentMinutes',
  score: 'score',
  isCompleted: 'isCompleted',
  answers: 'answers',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResultScalarFieldEnum = {
  id: 'id',
  courseOfferingId: 'courseOfferingId',
  studentProfileId: 'studentProfileId',
  examId: 'examId',
  assignmentId: 'assignmentId',
  examAttemptId: 'examAttemptId',
  submissionId: 'submissionId',
  resultType: 'resultType',
  title: 'title',
  pointsEarned: 'pointsEarned',
  pointsPossible: 'pointsPossible',
  percentage: 'percentage',
  letterGrade: 'letterGrade',
  status: 'status',
  gradedAt: 'gradedAt',
  gradedById: 'gradedById',
  feedback: 'feedback',
  isCurved: 'isCurved',
  curveValue: 'curveValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TranscriptScalarFieldEnum = {
  id: 'id',
  studentProfileId: 'studentProfileId',
  termId: 'termId',
  status: 'status',
  gpa: 'gpa',
  totalCredits: 'totalCredits',
  earnedCredits: 'earnedCredits',
  isOfficial: 'isOfficial',
  generatedAt: 'generatedAt',
  generatedById: 'generatedById',
  approvedAt: 'approvedAt',
  approvedById: 'approvedById',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TranscriptItemScalarFieldEnum = {
  id: 'id',
  transcriptId: 'transcriptId',
  courseOfferingId: 'courseOfferingId',
  courseCode: 'courseCode',
  courseTitle: 'courseTitle',
  creditHours: 'creditHours',
  letterGrade: 'letterGrade',
  pointsEarned: 'pointsEarned',
  pointsPossible: 'pointsPossible',
  percentage: 'percentage',
  termCode: 'termCode',
  termName: 'termName',
  year: 'year',
  semester: 'semester',
  isCompleted: 'isCompleted',
  isPassed: 'isPassed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended',
  pending: 'pending'
};

exports.UserLocale = exports.$Enums.UserLocale = {
  en: 'en',
  es: 'es',
  fr: 'fr',
  de: 'de',
  ar: 'ar',
  ur: 'ur'
};

exports.ModalityType = exports.$Enums.ModalityType = {
  in_person: 'in_person',
  online: 'online',
  hybrid: 'hybrid'
};

exports.TeachingRole = exports.$Enums.TeachingRole = {
  primary: 'primary',
  co_instructor: 'co_instructor',
  ta: 'ta'
};

exports.EnrollmentStatus = exports.$Enums.EnrollmentStatus = {
  enrolled: 'enrolled',
  waitlisted: 'waitlisted',
  dropped: 'dropped',
  completed: 'completed'
};

exports.SubmissionStatus = exports.$Enums.SubmissionStatus = {
  draft: 'draft',
  submitted: 'submitted',
  graded: 'graded',
  returned: 'returned'
};

exports.ExamType = exports.$Enums.ExamType = {
  quiz: 'quiz',
  midterm: 'midterm',
  final: 'final',
  assignment: 'assignment',
  project: 'project',
  presentation: 'presentation'
};

exports.ExamStatus = exports.$Enums.ExamStatus = {
  draft: 'draft',
  published: 'published',
  active: 'active',
  completed: 'completed',
  archived: 'archived'
};

exports.ResultStatus = exports.$Enums.ResultStatus = {
  pending: 'pending',
  graded: 'graded',
  approved: 'approved',
  disputed: 'disputed',
  final: 'final'
};

exports.TranscriptStatus = exports.$Enums.TranscriptStatus = {
  draft: 'draft',
  pending_approval: 'pending_approval',
  approved: 'approved',
  official: 'official',
  archived: 'archived'
};

exports.Prisma.ModelName = {
  Role: 'Role',
  Profile: 'Profile',
  ProfileRole: 'ProfileRole',
  Department: 'Department',
  Term: 'Term',
  Course: 'Course',
  CourseOffering: 'CourseOffering',
  TeachingAssignment: 'TeachingAssignment',
  Enrollment: 'Enrollment',
  Assignment: 'Assignment',
  Submission: 'Submission',
  Exam: 'Exam',
  ExamAttempt: 'ExamAttempt',
  Result: 'Result',
  Transcript: 'Transcript',
  TranscriptItem: 'TranscriptItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
