// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ENUM types
enum UserStatus {
  active
  inactive
  suspended
  pending
}

enum UserLocale {
  en
  es
  fr
  de
  ar
  ur
}

enum ModalityType {
  in_person
  online
  hybrid
}

enum EnrollmentStatus {
  enrolled
  waitlisted
  dropped
  completed
}

enum TeachingRole {
  primary
  co_instructor
  ta
}

// Roles table
model Role {
  id          String    @id @default(uuid())
  key         String    @unique
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // Relations
  profileRoles ProfileRole[]

  @@map("roles")
}

// Profiles table (maps to auth.users)
model Profile {
  id                  String     @id @default(uuid())
  orgId               String?    @map("org_id")
  email               String     @unique
  firstName           String     @map("first_name")
  lastName            String     @map("last_name")
  username            String?    @unique
  avatarUrl           String?    @map("avatar_url")
  status              UserStatus @default(active)
  locale              UserLocale @default(en)
  emailVerifiedAt     DateTime?  @map("email_verified_at")
  failedLoginAttempts Int        @default(0) @map("failed_login_attempts")
  lockedUntil         DateTime?  @map("locked_until")
  lastLoginAt         DateTime?  @map("last_login_at")
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")
  deletedAt           DateTime?  @map("deleted_at")

  // Relations
  profileRoles        ProfileRole[]
  createdCourses      Course[]
  teachingAssignments TeachingAssignment[]
  enrollments         Enrollment[]

  @@map("profiles")
}

// Profile-Role junction table
model ProfileRole {
  id        String    @id @default(uuid())
  profileId String    @map("profile_id")
  roleId    String    @map("role_id")
  orgId     String?   @map("org_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  role    Role    @relation(fields: [roleId], references: [id], onDelete: Restrict)

  // Unique constraint: one role per profile per org
  @@unique([profileId, roleId, orgId], map: "profile_roles_profile_id_role_id_org_id_key")
  @@map("profile_roles")
}

// Departments table
model Department {
  id        String   @id @default(uuid())
  orgId     String   @map("org_id")
  code      String
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  courses Course[]

  // Unique constraint per org
  @@unique([orgId, code])
  @@map("departments")
}

// Terms table
model Term {
  id        String   @id @default(uuid())
  orgId     String   @map("org_id")
  code      String
  name      String
  dateStart DateTime @map("date_start") @db.Date
  dateEnd   DateTime @map("date_end") @db.Date
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  courseOfferings CourseOffering[]

  // Unique constraint per org
  @@unique([orgId, code])
  @@map("terms")
}

// Courses table
model Course {
  id           String   @id @default(uuid())
  orgId        String   @map("org_id")
  departmentId String?  @map("department_id")
  code         String
  title        String
  description  String?
  creditHours  Int?     @map("credit_hours")
  createdById  String?  @map("created_by")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  department      Department?      @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  createdBy       Profile?         @relation(fields: [createdById], references: [id], onDelete: SetNull)
  courseOfferings CourseOffering[]

  // Unique constraint per org
  @@unique([orgId, code])
  @@map("courses")
}

// Course Offerings table
model CourseOffering {
  id               String       @id @default(uuid())
  orgId            String       @map("org_id")
  courseId         String       @map("course_id")
  termId           String       @map("term_id")
  sectionCode      String       @map("section_code")
  modality         ModalityType @default(in_person)
  capacity         Int          @default(30)
  waitlistCapacity Int          @default(10) @map("waitlist_capacity")
  isPublished      Boolean      @default(false) @map("is_published")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  // Relations
  course              Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  term                Term                 @relation(fields: [termId], references: [id], onDelete: Restrict)
  teachingAssignments TeachingAssignment[]
  enrollments         Enrollment[]

  // Unique constraint per course, term, and section
  @@unique([courseId, termId, sectionCode])
  @@map("course_offerings")
}

// Teaching Assignments table
model TeachingAssignment {
  id                  String       @id @default(uuid())
  courseOfferingId    String       @map("course_offering_id")
  instructorProfileId String       @map("instructor_profile_id")
  role                TeachingRole @default(primary)
  createdAt           DateTime     @default(now()) @map("created_at")

  // Relations
  courseOffering    CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)
  instructorProfile Profile        @relation(fields: [instructorProfileId], references: [id], onDelete: Restrict)

  // Unique constraint per offering and instructor
  @@unique([courseOfferingId, instructorProfileId])
  @@map("teaching_assignments")
}

// Enrollments table
model Enrollment {
  id               String           @id @default(uuid())
  courseOfferingId String           @map("course_offering_id")
  studentProfileId String           @map("student_profile_id")
  status           EnrollmentStatus @default(enrolled)
  gradeScheme      String?          @map("grade_scheme")
  gradeValue       String?          @map("grade_value")
  enrolledAt       DateTime         @default(now()) @map("enrolled_at")
  droppedAt        DateTime?        @map("dropped_at")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  // Relations
  courseOffering CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade)
  studentProfile Profile        @relation(fields: [studentProfileId], references: [id], onDelete: Restrict)

  // Unique constraint per offering and student
  @@unique([courseOfferingId, studentProfileId])
  @@map("enrollments")
}
